# Cursor AI Rules for prediq.fun

## Project Context
This is a prediction market platform built with T3 Stack (Next.js 15 + tRPC + Prisma + PostgreSQL).

**IMPORTANT**: Build errors in `/src/scripts/`, `/src/app/admin/`, and admin-related files can be ignored. Focus on optimizing the core prediction market functionality (SearchBar, MarketList, event handling, user-facing features).

## Core Development Rules

### 🚀 Performance & Database Optimization (CRITICAL)
**ALWAYS apply these performance patterns:**

#### Prisma Query Optimization
- ✅ **Use `select` instead of `include`** when possible - only fetch needed fields
- ✅ **Limit related data** with `take: 10` (max 10-20 items)
- ✅ **Batch parallel queries** with `Promise.all()`
- ✅ **Conditional updates** - check if data needs updating before executing
- ❌ **Never use include for all fields** when only some are needed

#### React Query / tRPC Caching
**ALWAYS add these options to queries:**
```typescript
{
  staleTime: 2 * 60 * 1000, // 2 minutes
  gcTime: 10 * 60 * 1000, // 10 minutes
}
```

#### Database Connection
- ✅ **Connection pooling**: DATABASE_URL must include `?connection_limit=10&pool_timeout=10&connect_timeout=30`
- ❌ **No query logging** in development (only error/warn)

### 🎯 Code Quality Rules

#### TypeScript & Validation
- ✅ **Always use Zod schemas** for input validation
- ✅ **Type all tRPC procedures** with input/output schemas
- ❌ **Never use `any` type** without explicit comment explaining why

#### UI/UX Standards
- ✅ **Add `cursor-pointer`** to all clickable elements
- ✅ **Use CSS custom properties** for colors (never mix with Tailwind)
- ✅ **Support both light/dark modes** for all components
- ✅ **Mobile-first responsive design**

#### Internationalization
- ✅ **All user-facing text** must use `useTranslations()`
- ✅ **TimeZone must be configured** as 'America/Sao_Paulo'
- ✅ **Add translations to both** `en/` and `pt/` message files

### 🔧 Architecture Patterns

#### API Design
- ✅ **Use `protectedProcedure`** for authenticated routes
- ✅ **Use `publicProcedure`** only for truly public data
- ✅ **Consistent error handling** with `TRPCError`
- ✅ **Input validation** with Zod schemas

#### Database Schema
- ✅ **Use `cuid()` for primary keys** (not UUID)
- ✅ **Decimal type for financial data** (never float)
- ✅ **Platform-agnostic schema** design
- ✅ **Proper indexing** on frequently queried fields

#### Search & Filtering
- ✅ **Debounce search inputs** minimum 300ms
- ✅ **Use slug-based URLs** for SEO
- ✅ **Implement pagination** for large datasets
- ✅ **Cache search results** appropriately

### ⚡ Performance Patterns

#### Background Tasks
- ✅ **Polling intervals minimum 5 minutes** (never less than 1 minute)
- ✅ **Check if updates needed** before executing
- ✅ **Use `Promise.all()`** for parallel operations

#### Client-Side Optimization
- ✅ **Implement proper loading states**
- ✅ **Use React.memo()** for expensive components
- ✅ **Lazy load heavy components**
- ✅ **Optimize images** with Next.js Image component

### 🚫 Never Do These
- ❌ **Raw SQL queries** (use Prisma)
- ❌ **Hardcoded data in components** (use database + cache)
- ❌ **Frequent polling** (< 5 minutes)
- ❌ **Missing error boundaries**
- ❌ **Unvalidated user inputs**
- ❌ **Mixed color systems** (Tailwind + CSS vars)

### 📋 Code Review Checklist
Before submitting code, verify:
- [ ] Query uses `select` instead of `include` where possible
- [ ] React Query has `staleTime` and `gcTime` configured
- [ ] All inputs validated with Zod
- [ ] Clickable elements have `cursor-pointer`
- [ ] Translations added to both languages
- [ ] Performance optimizations applied
- [ ] Error handling implemented
- [ ] Types are properly defined

## Project-Specific Context
- **Database**: PostgreSQL with Prisma ORM
- **Authentication**: NextAuth.js
- **UI**: shadcn/ui with Tailwind CSS
- **Internationalization**: next-intl (pt/en)
- **Deployment**: Optimized for serverless environments

When in doubt, prioritize performance and user experience over convenience.